1. Explain the entire flow for the login and authentication in React? Explain scenarios in brief?
2. What are the roles of JWT tokens?
3. What happen when token gets expired and how user maintain the login? So that user having an seamless experience?
4. Why we use Memomization in React?
5. What are the techniques uses in Memozization, what problems we face what are their principles?
6. If we are reutilising the value with memozization then why we don't use cache?
7. Simple break the array without using loop, reduce not using any array methods, print array in console 1 by 1.

8. What is hoisting?
9. What is closure?
10. What is recurssion function?
11. 

function printArray (arr, index = 0){
	if(index < arr.length){
		console.log(arr[index]);
		printArray(arr, index + 1);
	}
}

Event loop in javascript?

The event loop is a fundamental concept in JavaScript that allows for asynchronous programming. It is responsible for handling and executing multiple operations, such as I/O operations, timers, and user interactions, without blocking the main thread. The event loop enables JavaScript to be non-blocking and single-threaded, allowing it to perform asynchronous tasks efficiently.

How the Event Loop Works
Call Stack:

The call stack is a data structure that keeps track of the execution context of functions. When a function is called, it is pushed onto the call stack. When the function execution is complete, it is popped off the stack.
Web APIs:

Web APIs are provided by the browser (or Node.js) and include functionalities like setTimeout, DOM events, HTTP requests, etc. When an asynchronous operation is called, it is handled by the Web APIs.
Callback Queue (Task Queue):

The callback queue is a queue that holds the callbacks of asynchronous operations. When an asynchronous operation completes, its callback is pushed onto the callback queue.
Event Loop:

The event loop continuously checks the call stack and the callback queue. If the call stack is empty, the event loop pushes the first callback from the callback queue onto the call stack for execution.


===

what are different tasks involved in the event loop?


Types of Tasks in the Event Loop
ðŸ’¡ Microtasks (Higher Priority)

These are executed immediately after the current execution context and before any other tasks (even if setTimeout is 0ms).
Stored in the Microtask Queue.
Examples:
Promises (.then(), .catch(), .finally())
process.nextTick() (Node.js only)
MutationObserver (DOM API)
ðŸ’¡ Macrotasks (Lower Priority)

Also called "Tasks", these are scheduled in the Task Queue and executed after all Microtasks are completed.
Examples:
setTimeout()
setInterval()
setImmediate() (Node.js only)
I/O operations (file system, network requests)
Message Channel events


Execution Order
Execute the current function in the Call Stack.
Process all Microtasks in the Microtask Queue.
Pick the first Macrotask from the Task Queue and execute it.
Repeat Steps 2 & 3 (event loop keeps running).